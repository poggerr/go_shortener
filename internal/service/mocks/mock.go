// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/poggerr/go_shortener/internal/models"
)

// MockURLShortenerService is a mock of URLShortenerService interface.
type MockURLShortenerService struct {
	ctrl     *gomock.Controller
	recorder *MockURLShortenerServiceMockRecorder
}

// MockURLShortenerServiceMockRecorder is the mock recorder for MockURLShortenerService.
type MockURLShortenerServiceMockRecorder struct {
	mock *MockURLShortenerService
}

// NewMockURLShortenerService creates a new mock instance.
func NewMockURLShortenerService(ctrl *gomock.Controller) *MockURLShortenerService {
	mock := &MockURLShortenerService{ctrl: ctrl}
	mock.recorder = &MockURLShortenerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLShortenerService) EXPECT() *MockURLShortenerServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockURLShortenerService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockURLShortenerServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockURLShortenerService)(nil).Close))
}

// Delete mocks base method.
func (m *MockURLShortenerService) Delete(ctx context.Context, user *uuid.UUID, ids []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, user, ids)
}

// Delete indicates an expected call of Delete.
func (mr *MockURLShortenerServiceMockRecorder) Delete(ctx, user, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockURLShortenerService)(nil).Delete), ctx, user, ids)
}

// GetUserStorage mocks base method.
func (m *MockURLShortenerService) GetUserStorage(ctx context.Context, user *uuid.UUID, defURL string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStorage", ctx, user, defURL)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStorage indicates an expected call of GetUserStorage.
func (mr *MockURLShortenerServiceMockRecorder) GetUserStorage(ctx, user, defURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStorage", reflect.TypeOf((*MockURLShortenerService)(nil).GetUserStorage), ctx, user, defURL)
}

// Ping mocks base method.
func (m *MockURLShortenerService) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLShortenerServiceMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLShortenerService)(nil).Ping), arg0)
}

// Restore mocks base method.
func (m *MockURLShortenerService) Restore(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockURLShortenerServiceMockRecorder) Restore(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockURLShortenerService)(nil).Restore), ctx, id)
}

// Store mocks base method.
func (m *MockURLShortenerService) Store(ctx context.Context, user *uuid.UUID, longURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, user, longURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockURLShortenerServiceMockRecorder) Store(ctx, user, longURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockURLShortenerService)(nil).Store), ctx, user, longURL)
}

// StoreBatch mocks base method.
func (m *MockURLShortenerService) StoreBatch(ctx context.Context, user *uuid.UUID, batchIn models.BatchList, defURL string) (models.BatchList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBatch", ctx, user, batchIn, defURL)
	ret0, _ := ret[0].(models.BatchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreBatch indicates an expected call of StoreBatch.
func (mr *MockURLShortenerServiceMockRecorder) StoreBatch(ctx, user, batchIn, defURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBatch", reflect.TypeOf((*MockURLShortenerService)(nil).StoreBatch), ctx, user, batchIn, defURL)
}
